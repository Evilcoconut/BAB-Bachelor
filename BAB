#install.packages("xtable")


library(xtable)
par(mar=c(5, 4, 2, 2)) #Plot størrelse

#BAB with EW-industry and VW-market

Raw_daily <- read.csv("49_Industry_Portfolios_Daily_EW.csv"); names(Raw_daily)[1] <- "Date"
Raw_Monthly <- read.csv("49_Industry_Portfolios_Monthly_EW.csv"); names(Raw_Monthly)[1] <- "Date"

FF3d <- read.csv("F-F_Research_Data_Factors_daily.CSV", header = TRUE, sep = ",", stringsAsFactors = FALSE)

FF3m <- read.csv("F-F_Research_Data_Factors_Monthly.CSV", header = TRUE, sep = ",", stringsAsFactors = FALSE)



#Data wrangling
n_Daily <- nrow(Raw_daily)
n_Monthly <- nrow(Raw_Monthly)

#NA for -99.99
Raw_daily = replace(Raw_daily[,], Raw_daily[,]==-99.99, NA) 
Raw_Monthly = replace(Raw_Monthly[,], Raw_Monthly[,]==-99.99, NA)

#Adding returns
Raw_daily$MarketReturn <- FF3d[,2]  
Raw_Monthly$MarketReturn <- FF3m[,2]  

#Rearranging data
Raw_daily <- Raw_daily[,c(1,51,2:50)]
Raw_Monthly <- Raw_Monthly[,c(1,51,2:50)]

#Market has no RF
Raw_daily_mer <- Raw_daily[,3:51] - FF3d[,5]; Raw_daily_mer <- cbind(Raw_daily[,1:2],Raw_daily_mer)
Raw_Monthly_mer <- Raw_Monthly[,3:51] - FF3m[,5]; Raw_Monthly_mer <- cbind(Raw_Monthly[,1:2],Raw_Monthly_mer)


#For table:
tmp <- data.frame(matrix(data=0, nrow=50, ncol=4))
for (i in 1:50){
  tmp[i,1] <- colnames(Raw_daily)[i+1]
  tmp[i,2] <- round(mean(Raw_daily[,i+1],na.rm = TRUE) *250,2)
  tmp[i,3] <- round(sd(Raw_daily[,i+1],na.rm = TRUE)* sqrt(250),2)
  tmp[i,4] <- round(tmp[i,2]/tmp[i,3],2)
}




#Constants
c=50            #Antal kolonner der skal regnes på
Forskydning = 1 #Forskydning grundet "date"-variablen
WinStd = 250    #Antal dage på 1 år til std
WinCor = 1250   #Antal dage på 5 år til cor
MinWinCor = 750 #Antal dage på 3 år til mindst at tage med i correlationen

# Længde af data
Dag1Index <- 1  
Dag1 <- substr(Raw_daily_mer[Dag1Index,1], 1,6)

DagNIndex <- nrow(Raw_daily_mer)
DagN <- substr(Raw_daily_mer[DagNIndex,1], 1,6)




############ Kompliceret beregning ############ 

n <- n_Daily

#Definitioner af matricer
betas <- data.frame(matrix(nrow=n_Monthly,ncol=c))  #antal måneder i datasæt
betasNon <- data.frame(matrix(nrow=n_Monthly,ncol=c))
MlogReturn <- matrix(nrow=DagNIndex)
MlogReturn3d <- matrix(nrow=DagNIndex)


Stdtest <- data.frame(matrix(nrow=n_Monthly,ncol=c))
Cortest <- data.frame(matrix(nrow=n_Monthly,ncol=c))





#Loopet
for (j in (1+Forskydning):(c+Forskydning)) {
  
  # log returns for industrier
  logReturns <- matrix(nrow=n)
  for (i in 1:n){
    #For ligevægtede
    if ( is.na(Raw_daily_mer[i,j]) ) {
      logReturns[i] <- NA
    } else {
      logReturns[i] <- log(1+Raw_daily_mer[i,j]/100)
    }
    
    if (j==(1+Forskydning)){
      MlogReturn[i] <- logReturns[i]
    }
    
  }
  
  # 3 dags log returns for industrier
  logReturns3d <- matrix(nrow=n)
  
  for (i in 3:n) {
    #For ligevægtede
    if (anyNA(c(Raw_daily_mer[i,j], Raw_daily_mer[i-1,j], Raw_daily_mer[i-2,j]))) {
      logReturns3d[i] <- NA
    } else {
      logReturns3d[i] <- log(1+Raw_daily_mer[i,j]/100) + log(1+Raw_daily_mer[i-1,j]/100) + log(1+Raw_daily_mer[i-2,j]/100)
    }
    
    if (j==(1+Forskydning)){
      MlogReturn3d[i] <- logReturns3d[i]
    }
    
  }
  
  
  #Månedlige estimater for std og cor for måned k
  # Artiklen kræver min 750 dage for cor estimatet
  
  Index <- MinWinCor+3 #3 er for 3-dags log return
  k <- 1
  
  # Første måned
  Måned1 <- substr(Raw_daily_mer[Index,1], 1,6)
  while (substr(Raw_daily_mer[Index,1], 1,6) == Måned1) {
    Index <- Index + 1
  }
  iMåned <- substr(Raw_daily_mer[Index,1], 1,6)
  
  
  repeat {
    # Finder måneder og regner på estimater
    while (substr(Raw_daily_mer[Index,1], 1,6) == iMåned) {
      Index <- Index + 1
    }
    iMåned <- substr(Raw_daily_mer[Index,1], 1,6)
    #Måneden noteres og bruges til at regne beta
    row.names(betas)[k] <- iMåned; row.names(betasNon)[k] <- iMåned
    
    
    if ( anyNA(logReturns[(Index-WinStd):(Index-1)]) ) {
      Std <- NA # Hvis vi mangler data
      
    } else {
      # Denne måneds std estimatet findes over seneste år (250 dage i WinStd)
      Std <- sd(logReturns[(Index-WinStd):(Index-1)])
      
      
      mStd <- sd(MlogReturn[(Index-WinStd):(Index-1)])
      
      Stdtest[k,j] <- Std
      
    }
    
    
    # Denne måneds cor estimatet findes over seneste 5 år (1250 dage i WinCor)
    # Siden 3 år (750) dage er nok til at estimere cor, definere vi range
    if (Index < WinCor +3 ){corRange <- Index - 3} else {corRange <- WinCor}
    
    if ( anyNA(logReturns3d[(Index-corRange):(Index-1)]) ) {
      SenesteNA <- max(is.na(logReturns3d[(Index-corRange):(Index-1)])*
                         ((Index-corRange):(Index-1)))
      corRange <- (Index-1) - SenesteNA
    }
    
    # Tjekker om vi har nok data på de 3 år til cor
    if (corRange < MinWinCor) {
      Cor <- NA
      
    } else  {
      Cor <- cor(logReturns3d[(Index-corRange):(Index-1)],
                 MlogReturn3d[(Index-corRange):(Index-1)])
      
      
      Cortest[k,j] <- Cor
      
    }
    
    # Udregner Beta
    if ( anyNA(c(Std, Cor))) {
      betas[k,j-Forskydning] <- NA
      
    } else {
      beta <- Cor*Std/mStd   #DETTE SKAL RETTES TILBAGE
      #beta <- beta_sim[j]
      
      
      shrinkBeta <- 0.6*beta + (1-0.6)*1 #Justeret beta mod 1    0.74 er fra wi, 1.08 er fra meanbeta
      
      
      betas[k,j-Forskydning] <- shrinkBeta
      
      
      betasNon[k,j-Forskydning] <- beta
      
    }
    
    
    # Springer sidste måned over
    if (row.names(betas)[k] == substr(Raw_daily_mer[n,1], 1,6)) break 
    k <- k + 1
  }
  
  
}


AntalMåneder <- k


a <- colMeans(Raw_daily_mer[,(1+Forskydning):(c+Forskydning)],na.rm=TRUE)/100*250
b <- colMeans(betasNon[,1:c],na.rm = TRUE)
plot(b[2:50],a[2:50],ylim=c(0,0.3),xlim=c(0,1.6),main="",labels=rownames(a),type="n");text(b[2:50], a[2:50], cex=0.75,col="red")



par(mar=c(4, 4, 1, 1)) #uden xlab
#Simpel metode
par(mfrow=c(1,1))
plot(beta_log_sim[3:51],a_sim[3:51]*250/100,las=1,ylim = c(0,0.3),xlim=c(0,1.8),xlab="Beta",ylab="E(r) - rf",cex.main = 1.1,col="Darkgreen") #Ændre titlen
abline(0,a_sim[2]*250/100,col="black")
l<-lm(a_sim[3:51]*250/100~beta_log_sim[3:51]);   abline(l$coefficients[1],l$coefficients[2],col="Darkgreen")

par(new = TRUE)
#Kompliceret metode
par(mfrow=c(1,1))
plot(b[2:50],a[2:50],ylim = c(0,0.3),las=1,xlim=c(0,1.8),xlab="Beta",ylab="E(r) - rf",cex.main = 1.1,col="Darkblue")
abline(0,a[1],col="black")
l<-lm(a[2:50]~b[2:50]);   abline(l$coefficients[1],l$coefficients[2],col="Darkblue")
legend(0,0.3,c("Simpel","Kompliceret"),col=c("DarkGreen","Darkblue"),lwd=c(2,2),box.col="transparent")




############ P1-P10############
måned <- 1
while (Raw_Monthly_mer[måned,1] != Måned1) {
  måned <- måned + 1
}


p <- 10

Ppf <- data.frame(matrix(0, nrow=AntalMåneder,ncol=2*p))
betasMdr <- betas[,2:c]


IndustriesMdr <- Raw_Monthly_mer[,3:(c+1)]


for (m in 1:(AntalMåneder-1)){ 
  # Ekskluder NA beta og NA return da vi ikke vil bruge disse
  inkluder_ab <- (!is.na(betasMdr[m,])) * (!is.na(IndustriesMdr[måned+m+1,])) == 1
  inkluder_ret <- (!is.na(betasMdr[m,])) * (!is.na(IndustriesMdr[måned+m+2,])) == 1
  
  # Extract as vectors and ensure they are numeric
  relBetas_ab_vector <- unlist(betasMdr[m, inkluder_ab])
  relBetas_ret_vector <- unlist(betasMdr[m, inkluder_ret])
  
  nonNApfs_ab <- unlist(IndustriesMdr[måned+m+1, inkluder_ab])
  nonNApfs_ret <- unlist(IndustriesMdr[måned+m+2, inkluder_ret])
  
  nonNAs_ab <- length(relBetas_ab_vector)
  nonNAs_ret <- length(relBetas_ret_vector)
  
  # assignment bruges til at sige hvor de beta-sorterert returns skal samles
  assignment_ab <- ceiling((1:nonNAs_ab)*p/nonNAs_ab)
  assignment_ret <- ceiling((1:nonNAs_ret)*p/nonNAs_ret)
  
  row.names(Ppf)[m] <- substr(Raw_Monthly_mer[måned+m+1,1], 1,6)
  
  for (j in 1:nonNAs_ab) {
    # Portefølje beta.
    Ppf[m,assignment_ab[j]] <- Ppf[m,assignment_ab[j]] + (relBetas_ab_vector[order(relBetas_ab_vector)[j]]) / sum(assignment_ab == assignment_ab[j])    
  }
  
  for (j in 1:nonNAs_ret){
    # Portefølje afkast
    Ppf[m+1,p+assignment_ret[j]] <- Ppf[m+1,p+assignment_ret[j]] + nonNApfs_ret[order(relBetas_ret_vector)[j]] / sum(assignment_ret == assignment_ret[j])    
  }
}


#Jensen Alpha for porteføljerne
JAlpha <- data.frame(matrix(0, nrow=p,ncol=1))
JAlpha3 <- data.frame(matrix(0, nrow=p,ncol=1))
RealBeta <- data.frame(matrix(0, nrow=p,ncol=1))
estBeta <- data.frame(matrix(0, nrow=p,ncol=1))
exRet <- data.frame(matrix(0, nrow=p,ncol=1))
tstat_P_alpha <- data.frame(matrix(0, nrow=p,ncol=1))
tstat_P_exRet <- data.frame(matrix(0, nrow=p,ncol=1))
JAlpha3 <- data.frame(matrix(0, nrow=p,ncol=1))
tstat_P_alpha3 <- data.frame(matrix(0, nrow=p,ncol=1))



for (i in 1:p){
  tmp <- lm(Ppf[,10+i]~Raw_Monthly_mer[((måned+2):n_Monthly),2])
  
  tmp2 <- lm(Ppf[,10+i]~Raw_Monthly_mer[((måned+2):n_Monthly),2]+FF3m[(måned+2):n_Monthly,3]+FF3m[(måned+2):n_Monthly,4])
  tstat_P_alpha3[i,1] <- summary(tmp2)$coefficients[1,3]
  JAlpha3[i,1] <- tmp2$coefficients[1]
  
  tstat_P_alpha[i,1] <- summary(tmp)$coefficients[1,3]
  tstat_P_exRet[i,1] <- t.test(Ppf[,10+i], mu = 0)$statistic
  JAlpha[i,1] <- tmp$coefficients[1]
  RealBeta[i,1] <- tmp$coefficients[2]
  estBeta[i,1] <- mean(Ppf[,i])
  exRet[i,1] <- mean(Ppf[,10+i])  
  
}


#Plots over tid
# Lav beta, midt beta, høj beta og market
Sammenligning <- data.frame(matrix(data=0, nrow=AntalMåneder,ncol=5))
Sammenligning[1,]=1

# Lav beta (P1):
RetLav <- Ppf[,1+p]
BetaLav <- coef(lm(RetLav ~ Raw_Monthly_mer[((måned+2):n_Monthly),2]))[2]
RetLav <- RetLav / BetaLav # Gearing
# Mid beta (P5):
RetMid <- Ppf[,5+p]
BetaMid <- coef(lm(RetMid ~ Raw_Monthly_mer[((måned+2):n_Monthly),2]))[2]
RetMid <- RetMid / BetaMid # Gearing
# Høj beta (P10)
RetHøj <- Ppf[,10+p]
BetaHøj <- coef(lm(RetHøj ~ Raw_Monthly_mer[((måned+2):n_Monthly),2]))[2]
RetHøj <- RetHøj / BetaHøj # Gearing
# Market
RetMarket <- Raw_Monthly_mer[((måned+2):n_Monthly),2]
rf <- FF3m[((måned+2):n_Monthly),5] #SKAL DEN HER MED?


for (i in 2:AntalMåneder) {
  Sammenligning[i,1] <- row.names(betas)[i]
  Sammenligning[i,2] <- Sammenligning[i-1,2]*(1+(RetLav[i]+rf[i])/100)
  Sammenligning[i,3] <- Sammenligning[i-1,3]*(1+(RetMid[i]+rf[i])/100)
  Sammenligning[i,4] <- Sammenligning[i-1,4]*(1+(RetHøj[i]+rf[i])/100)
  Sammenligning[i,5] <- Sammenligning[i-1,5]*(1+(RetMarket[i]+rf[i])/100)
}

options(scipen=999)
plot(ts(Sammenligning[,2], start=c(1929,4), end=2021, frequency = 12), type='l',lwd=1,col="green",log="y",yaxt = "n",xlab="Tid",ylab="");axis(2, c(1,10,100,1000,10000,100000),las=1)
lines(ts(Sammenligning[,3], start=c(1929,4), end=2021, frequency = 12),col="red",lwd=1)
lines(ts(Sammenligning[,4], start=c(1929,4), end=2021, frequency = 12),col="blue",lwd=1)
lines(ts(Sammenligning[,5], start=c(1929,4), end=2021, frequency = 12),lwd=1)
legend("topleft",c("Low-Beta", "Mid-Beta","High-Beta","Market"), lwd=c(2,2), col=c("green","red","blue","black"),box.col="transparent",box.lwd = 0,bg="transparent",ncol = 2)





############ BAB PF############
BABpf <- data.frame(matrix(data=0, nrow=AntalMåneder, ncol=8))
betaTilplot <- data.frame(matrix(data=0, nrow=AntalMåneder, ncol=2))

row.names(BABpf)[1102] <- "202012"
colnames(BABpf)[1] <- 'Kort return'
colnames(BABpf)[2] <- 'Lang return'
colnames(BABpf)[3] <- 'BAB return'
colnames(BABpf)[4] <- 'Cumulative BAB return'
colnames(BABpf)[5] <- '$long'
colnames(BABpf)[6] <- '$short'
colnames(BABpf)[7] <- 'Beta spread'
colnames(BABpf)[8] <- 'Kumuleret BAB skaleret med betaspread'

for (m in 1:(AntalMåneder-1)) {
  row.names(BABpf)[m] <- substr(FF3m[måned+m+1,1], 1,6)
  # Samme rutine! (KAN MAN SMIDE I TIDLIGERE LOOP?!)
  inkluder_bab <- (!is.na(betasMdr[m,])) * (!is.na(IndustriesMdr[måned+m+2,])) == 1
  relBetas_bab <- betasMdr[m,inkluder_bab]
  nonNApfs_bab <- IndustriesMdr[måned+m+2,inkluder_bab]
  
  zbar <- mean(rank(relBetas_bab))
  diffzbar <- rank(relBetas_bab) - zbar
  k <- 2/sum(abs(diffzbar))
  
  #testen: Nedenstående summer til 1
  #sum(k*abs(diffzbar)*(diffzbar>0))
  #sum(k*abs(diffzbar)*(diffzbar<0))
  
  
  # Kort i højbeta
  BABpf[m+1,1] <- sum(k*(diffzbar>0)*diffzbar * nonNApfs_bab)
  betaH <- sum(k*(diffzbar>0)*diffzbar * relBetas_bab)
  betaTilplot[m,1] <- betaH
  # Lang i lavbeta
  BABpf[m+1,2] <- sum(k*(diffzbar<0)*abs(diffzbar) * nonNApfs_bab)
  betaL <- sum(k*(diffzbar<0)*abs(diffzbar) * relBetas_bab)
  betaTilplot[m,2] <- betaL
  #BAB return
  BABpf[m+1,3] <- 1/betaL * BABpf[m+1,2] - 1/betaH * BABpf[m+1,1]
  # $Lang
  BABpf[m,5] <- 1/betaL
  # $kort
  BABpf[m,6] <- 1/betaH
  
  # Betaspread hvis det skal bruges
  BABpf[m,7] <- (betaH - betaL)/(betaH*betaL)
  BABpf[m+1,8] <- BABpf[m,8] + 1/BABpf[m,7] * BABpf[m+1,3]
}

1/mean(BABpf[,5]) #gns lav
1/mean(BABpf[,6]) #gns høj


# BAB return over årene
BABReturn <- mean(BABpf[,3])
tstat_bab_exRet <- t.test(BABpf[,3], mu = 0)$statistic

# BAB alpha
model_bab <- lm(BABpf[,3] ~ Raw_Monthly_mer[((måned+2):n_Monthly),2])
tstat_bab_alpha <- summary(model_bab)$coefficients[1,3]

JAlpha_bab <- model_bab$coefficients[1]
Beta_bab <- model_bab$coefficients[2]

# BAB alpha (trefaktors)
model_bab3 <- lm(BABpf[,3] ~ Raw_Monthly_mer[((måned+2):n_Monthly),2]+FF3m[(måned+2):n_Monthly,3]+FF3m[(måned+2):n_Monthly,4])
tstat_bab3_alpha <- summary(model_bab3)$coefficients[1,3]
JAlpha_bab3 <- model_bab3$coefficients[1]


sum3fak <- data.frame(nrow=4,ncol=4)
sum3fak <- summary(model_bab3)$coefficients[,]
row.names(sum3fak) <- c("Alfa","Beta_M","SML","HML")
print(xtable(sum3fak, type = "latex"), file = "GENSKABELSE 3fak.tex")

#BAB long short
BABlong <- mean(BABpf$'$long')
BABshort <- mean(BABpf$`$short`)


# BAB Sharpe
BABvol <- sd(BABpf[,3])*sqrt(12)
BABSharpe <- 12*BABReturn / BABvol

# cum BAB
for (i in 2:AntalMåneder) {
  BABpf[i,4] <- BABpf[i-1,4] + BABpf[i,3]
}


plot(ts(Sammenligning[,2], start=c(1929,4), end=2020, frequency = 12), type='l',col="green",log="y",yaxt = "n",xlab="Tid",ylab="Formue",cex.lab=0.3);axis(2, c(1,10,100,1000,10000,100000))
lines(ts(Sammenligning[,3], start=c(1929,4), end=2020, frequency = 12),col="red")
lines(ts(Sammenligning[,4], start=c(1929,4), end=2020, frequency = 12),col="blue")
lines(ts(Sammenligning[,5], start=c(1929,4), end=2020, frequency = 12))
lines(ts(BABpf[,4],start=c(1929,4), end=2020, frequency = 12),col="gold") #Tror den hopper i starten grundet negativt cummulative afkast, og log til negativt er lort :)
legend(1927,200000,c("Lav-beta", "Middel-Beta","Høj-Beta","Markedet","BAB"), lwd=c(1,1), col=c("green","red","blue","black","gold"))

plot(ts(BABpf[,8], start=c(1929,4), end=2020, frequency = 12), type='l',col="green",xlab="Tid",ylab="BAB afkast",cex.lab=0.3)
lines(ts(BABpf[,8]-BABpf[,4], start=c(1929,4), end=2020, frequency = 12), type='l',col="red",xlab="Tid",ylab="BAB afkast",cex.lab=0.3)
lines(ts(BABpf[,4],start=c(1929,4), end=2020, frequency = 12),col="black") #Tror den hopper i starten grundet negativt cummulative afkast, og log til negativt er lort :)



############ Tabel Oversigt ############ 
tabel<- data.frame(matrix(data=0, nrow=10, ncol=11))
colnames(tabel) <- paste("P", 1:10, sep = "")
colnames(tabel)[11] <- "BAB"
for (j in 1:10){
  row.names(tabel)[1] <- "Excess return"; tabel[1,j] <- round(exRet[j,1], 2)
  row.names(tabel)[2] <- "T-value"; tabel[2,j] <- round(tstat_P_exRet[j,1], 2)
  row.names(tabel)[3] <- "CAPM alpha"; tabel[3,j] <- round(JAlpha[j,1], 2)
  row.names(tabel)[4] <- "T-Value  "; tabel[4,j] <- round(tstat_P_alpha[j,1], 2)
  
  row.names(tabel)[5] <- "Three-factor alpha"; tabel[5,j] <- round(JAlpha3[j,1], 2)
  row.names(tabel)[6] <- "T-value "; tabel[6,j] <- round(tstat_P_alpha3[j,1], 2)
  
  row.names(tabel)[7] <- "Beta (ex ante)"; tabel[7,j] <- round(estBeta[j,1], 2)
  row.names(tabel)[8] <- "Beta (realized)"; tabel[8,j] <- round(RealBeta[j,1], 2)
  row.names(tabel)[9] <- "Volatility"; tabel[9,j] <- round(sd(Ppf[,10+j])*sqrt(12), 2)
  row.names(tabel)[10] <- "Sharpe ratio"; tabel[10,j] <- round(12*exRet[j,1]/(sd(Ppf[,10+j])*sqrt(12)), 2)
}


tabel[1,11] <- round(BABReturn, 2)
tabel[2,11] <- round(tstat_bab_exRet, 2)
tabel[3,11] <- round(JAlpha_bab, 2)
tabel[4,11] <- round(tstat_bab_alpha, 2)

tabel[5,11] <- round(JAlpha_bab3, 2)
tabel[6,11] <- round(tstat_bab3_alpha, 2)

tabel[7,11] <- 0  # Assuming you want to keep this as an integer
tabel[8,11] <- round(Beta_bab, 2)
tabel[9,11] <- round(BABvol, 2)
tabel[10,11] <- round(BABSharpe, 2)


print(xtable(tabel, type = "latex"), file = "GENSKABELSE tabel.tex") #Gemmes som LigeVærdi
mean_long <- mean(BABpf$`$long`, na.rm = TRUE)
mean_short<- mean(BABpf$`$short`, na.rm = TRUE)




###TED
row.names(BABpf)[684]
row.names(BABpf)[1136]
nTedStart <- 684
nTedEnd <- 1136

TEDTemp <- readxl::read_excel("TEDRATE.xls")
TEDTemp <- as.data.frame(TEDTemp)
TED <- data.frame(matrix(nrow=nrow(TEDTemp),ncol=1))
TED[,1] <- TEDTemp[,2]
row.names(TED) <- TEDTemp[,1]

nMåneder <- 600
TEDstat <- data.frame(matrix(nrow=nMåneder,ncol=3))
lastindex <- dim(TED)[1]
lastday <- rownames(TED)[lastindex]

# Calculate monthly data for month k
# Min 750 days for corr data
currentIndex <- 1
k <- 1

# First month
startIndex <- currentIndex
startTED <- 0.9 # Hard coded for first month since first observation 19860102 left out
currentMonth <- substring(rownames(TED)[startIndex],1,7)
colnames(TEDstat)[1] <- 'Volatility during month'
colnames(TEDstat)[2] <- 'TED spread by end of last month'
colnames(TEDstat)[3] <- 'Change in TED spread during month'
repeat {
  # Find end of month
  while (substring(rownames(TED)[currentIndex],1,7) == currentMonth) {
    currentIndex <- currentIndex + 1
  }
  endIndex <- currentIndex - 1
  endTED <- TED[endIndex,1] # Last value in month t-1
  # Calculate volatility for month currentMonth
  row.names(TEDstat)[k] <- currentMonth
  TEDstat[k,1] <- sd(TED[startIndex:endIndex,1])
  TEDstat[k,2] <- startTED # NOTE: Different for first month, consider skipping
  TEDstat[k,3] <- endTED - startTED # NOTE: Different for first month, consinder skipping 
  # Preparing for calculation of next month's volatility
  startIndex <- currentIndex # First day in month t
  startTED <- TED[startIndex - 1,1] # Last value in month t-1
  currentMonth <- substring(rownames(TED)[startIndex],1,7) # Month t
  
  # Do not calculate data for last month
  if (substring(row.names(TED)[startIndex],1,7) == substring(lastday,1,7)) break
  k <- k + 1
}
nMåneder <- k
nrow(TEDstat)


BABforReg <- BABpf[(nTedStart-1):nTedEnd,3] #return
laggedTED <- TEDstat[1:454,2] * 100 # To bps
changeInTED <- TEDstat[1:454,3] * 100 # To bps

betaSpread <- BABpf[(nTedStart-1):nTedEnd,7] * 100 # Not bp, just scaled up
marketForReg <- FF3m[(nTedStart+måned):n_Monthly,2]
laggedBAB <- BABpf[(nTedStart-2):(nTedEnd-1),3]

linearUncorrected <- lm(BABforReg ~ changeInTED + laggedTED)
linearCorrected <- lm(BABforReg ~ laggedTED + changeInTED + betaSpread + marketForReg + laggedBAB)

#plot
# Install and load necessary packages

library(ggplot2)
library(readxl)
library(dplyr)

# Read data from Excel file
TEDTemp <- read_excel("TEDRATE.xls", col_names = FALSE)
colnames(TEDTemp) <- c("Date", "Value")

# Convert Date column to Date type and Value to basis points
TEDTemp$Date <- as.Date(TEDTemp$Date)
TEDTemp$Value <- TEDTemp$Value * 100  # Convert percentage to basis points

# Aggregate data by month
TEDTempMonthly <- TEDTemp %>%
  mutate(Month = as.Date(cut(Date, breaks = "month"))) %>%
  group_by(Month) %>%
  summarize(AverageValue = mean(Value, na.rm = TRUE))

# Create the plot with monthly data
ggplot(TEDTempMonthly, aes(x = Month, y = AverageValue)) +
  geom_line(color = "blue", size = 1) +
  theme_minimal() +
  scale_x_date(date_breaks = "2 years", date_labels = "%Y") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "", y = "TED-spread (Basis Points)", title = "")

####plot sml ###
Risk_free1990 <- mean(FF3m$RF)
mean_beta <- mean(combined_averages$averagesbeta1990)

Raw_Monthly_mer1990 <- Raw_Monthly_mer[(762 + 1):nrow(Raw_Monthly_mer), ]
betas1990 <- betas[(730 + 1):nrow(betas), ]

averagesbeta1990 <- colMeans(betas1990, na.rm = TRUE)
averagesreturns1990 <- colMeans(Raw_Monthly_mer1990[, 2:ncol(Raw_Monthly_mer1990)], na.rm = TRUE)
combined_averages <- data.frame(averagesbeta1990, averagesreturns1990)
linear_model <- lm(averagesreturns1990 ~ averagesbeta1990, data = combined_averages)
# Plotting the data points with specified axis limits
# Enhanced plot
plot(averagesbeta1990, averagesreturns1990, main = "Theoretical vs Empirical SML", 
     xlab = "Beta", ylab = "Expected Excess Returns", 
     pch = 20,            # Smoother points
     cex = 1,           # Smaller points
     col = "blue",        # Point color
     xlim = c(0, max(1.5)), 
     ylim = c(0, max(1.5)),
     las = 1,             # Axis labels to be perpendicular to axes
     font.main = 2,       # Bold title font
     cex.main = 1.2,      # Larger title font
     cex.lab = 1.1,       # Larger axis labels
     cex.axis = 0.9)      # Slightly larger axis values

# Adding the regression line
abline(linear_model, col = "black", lwd = 1) # thicker line for visibility

# Adding gridlines
grid(nx = NULL, ny = NULL, col = "gray", lty = "dotted")

x_values <- seq(0, 1.5, by = 0.1)  # Adjust range as needed
y_values <- mean_beta * x_values
lines(x_values, y_values, type = "l", col = "red", lwd = 2, lty = 2)  # Theoretical line

text_x <- min(0)  # X-coordinate near the left edge
text_y <- max(1.3)  # Y-coordinate near the top edge

text(text_x, text_y, labels = "Red: Theoretical SML\nBlack: Empirical SML", col = "black", pos = 4)
